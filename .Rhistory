-DRG_Rank,
-Inpat_Record_Flag,
-ER_Record_Flag,
-ASTC_Record_Flag,
-Obs_23hr_Record_Flag,
-CON_Flag,
-Cumulative_Record_Flag,
-Reportable_Flag,
-TN_Co_Unk,
-Processing_Period,
-MS_MDC,
-MS_DRG,
-MS_DRG_4digit,
-HAC,
-Admit_From_ED_Flag,
-Wrong_Claim
)
train1 <- train$Diag1 %>%
paste(df$Diag1,
df$Diag2,
df$Diag3,
df$Diag4,
df$Diag5,
df$Diag6,
df$Diag7,
df$Diag8,
df$Diag9,
df$Diag10,
df$Diag11,
df$Diag12,
df$Diag13,
df$Diag14,
df$Diag15,
df$Diag16,
df$Diag17,
df$Diag18
)
ICD_Filtered[1,2]
keep<-(ICD_Filtered[i,1])
ICD_Filtered[1,1]
ICD_Filtered[2,1]
keepall<-c()
for(i in 1:492){
keep<-(ICD_Filtered[i,1],train1$Diag1)
keepall<-keep
}
keepall<-c()
for(i in 1:492){
keep<-grep(ICD_Filtered[i,1],train1$Diag1)
keepall<-keep
}
for(i in 1:492){
keep<-grep(ICD_Filtered[i,1],train$Diag1)
keepall<-keep
}
train1<-train1[keep,]
train<-train[keep,]
train<-train[keep,]
View(train)
keepall<-c()
for(i in 1:492){
keep<-grep(ICD_Filtered[i,1],train$Diag1)
keepall<-keep+keepall
}
train<-train[keep,]
#Filters out unnecessary columns
train <-df %>% select(
-Type_Bill,
-Fed_Tax_SubID,
-Fed_Tax_Num,
-Admission_Type,
-Admission_Source,
-Do_Not_Resuscitate,
-Accident_St,
-starts_with("Units_Service"), #[1:18]
-Primary_Health_Plan_Id,
-Secondary_Health_Plan_Id,
-Tertiary_Health_Plan_Id,
-Primary_Patient_Rel_Insr,
-Secondary_Patient_Rel_Insr,
-Tertiary_Patient_Rel_Insr,
-Dx_Px_Qualifier,
-starts_with("POA"), #[1:18]
-starts_with("Patient_Reason_Visit"),#[1:3],
-Prospect_Pay_Code,
-starts_with("Ecode"), #[1:3]
-starts_with("E_POA"), #[1:3]
-Type_ER_Visit,
-Outcome_ER_Visit,
-Inpatient_Flag,
-ER_Flag,
-PET_Flag,
-ASTC_Flag,
-Lithotripsy_Flag,
-MRI_MRA_Flag,
-Megavolt_Rad_Flag,
-CT_Flag,
-Fatal_Error_Flag,
-starts_with("Record_Num"), #[1:2]
-Bill_End,
-MUL,
-Patient_ID,
-TN_Co_Res,
-Payer_A,
-Payer_B,
-Payer_C,
-Amount_Counter,
-Race,
-LOS,
-DRG_Rank,
-Inpat_Record_Flag,
-ER_Record_Flag,
-ASTC_Record_Flag,
-Obs_23hr_Record_Flag,
-CON_Flag,
-Cumulative_Record_Flag,
-Reportable_Flag,
-TN_Co_Unk,
-Processing_Period,
-MS_MDC,
-MS_DRG,
-MS_DRG_4digit,
-HAC,
-Admit_From_ED_Flag,
-Wrong_Claim
)
keepall<-c()
for(i in 1:492){
keep<-grep(ICD_Filtered[i,1],train$Diag1)
keepall<-keep+keepall
}
train<-train[keep,]
View(train)
keep<-grep(ICD_Filtered[i,1],train$Diag1)
#Filters out unnecessary columns
train <-df %>% select(
-Type_Bill,
-Fed_Tax_SubID,
-Fed_Tax_Num,
-Admission_Type,
-Admission_Source,
-Do_Not_Resuscitate,
-Accident_St,
-starts_with("Units_Service"), #[1:18]
-Primary_Health_Plan_Id,
-Secondary_Health_Plan_Id,
-Tertiary_Health_Plan_Id,
-Primary_Patient_Rel_Insr,
-Secondary_Patient_Rel_Insr,
-Tertiary_Patient_Rel_Insr,
-Dx_Px_Qualifier,
-starts_with("POA"), #[1:18]
-starts_with("Patient_Reason_Visit"),#[1:3],
-Prospect_Pay_Code,
-starts_with("Ecode"), #[1:3]
-starts_with("E_POA"), #[1:3]
-Type_ER_Visit,
-Outcome_ER_Visit,
-Inpatient_Flag,
-ER_Flag,
-PET_Flag,
-ASTC_Flag,
-Lithotripsy_Flag,
-MRI_MRA_Flag,
-Megavolt_Rad_Flag,
-CT_Flag,
-Fatal_Error_Flag,
-starts_with("Record_Num"), #[1:2]
-Bill_End,
-MUL,
-Patient_ID,
-TN_Co_Res,
-Payer_A,
-Payer_B,
-Payer_C,
-Amount_Counter,
-Race,
-LOS,
-DRG_Rank,
-Inpat_Record_Flag,
-ER_Record_Flag,
-ASTC_Record_Flag,
-Obs_23hr_Record_Flag,
-CON_Flag,
-Cumulative_Record_Flag,
-Reportable_Flag,
-TN_Co_Unk,
-Processing_Period,
-MS_MDC,
-MS_DRG,
-MS_DRG_4digit,
-HAC,
-Admit_From_ED_Flag,
-Wrong_Claim
)
keep<-grep(ICD_Filtered[i,1],train$Diag1)
keep<-grep(as.character(ICD_Filtered[i,1]),train$Diag1)
ICD_Filtered[1,1]
ICD_Filtered[2,1]
ICD_Filtered[3,1]
library(gsheet)
# Reading in doc of IDC10codes
codes<-gsheet2tbl("https://docs.google.com/document/d/1e53UDsuHZwQAyVc8vAG69Al_tjXbnv6C/edit?usp=sharing")
# Reading in doc of IDC10codes
codes<-gsheet2tbl("https://docs.google.com/document/d/1e53UDsuHZwQAyVc8vAG69Al_tjXbnv6C/edit")
# Reading in doc of IDC10codes
codes<-gsheet2tbl("https://docs.google.com/document/d/1e53UDsuHZwQAyVc8vAG69Al_tjXbnv6C/edit?usp=sharing&ouid=101883700449258151197&rtpof=true&sd=true")
# Reading in doc of IDC10codes
codes<-gsheet2tbl("C:\Users\alane\Downloads\Supplementary Tables 1 and 2.docx")
# Reading in doc of IDC10codes
codes<-gsheet2tbl("C:/Users/alane/Downloads/Supplementary Tables 1 and 2.docx")
# Reading in doc of IDC10codes
codes<-gsheet::gsheet2tbl("C:/Users/alane/Downloads/Supplementary Tables 1 and 2.docx")
# Reading in doc of IDC10codes
codes<-gsheet::gsheet2tbl("https://docs.google.com/document/d/1e53UDsuHZwQAyVc8vAG69Al_tjXbnv6C/edit")
install.packages("officer")
library(officer)
#
data %>% filter(sud&sstvi) %>% tally()
######################## Libraries and Data sets ####################
# June 27rd 2022 | Start of exploration!
#####################################################################
library(tidyverse)
library(ggthemes)
setwd("D:/DataLab/syndemic")
data<-read_csv("masterdata.csv")
#
data %>% filter(sud&sstvi) %>% tally()
<<<<<<< HEAD
#
data %>% filter(sud&(endo|ost)) %>% tally()
#
data %>% filter(sud) %>% tally()
library(leaflet)
leaflet()
leaflet() %>% addProviderTiles(providers$HERE.basicMap)
leaflet() %>% addProviderTiles(providers$OpenStreetMap)
library(gsheet)
# Map of SEP trial run
locations<-gsheet2tbl("https://docs.google.com/spreadsheets/d/1sb4P_7-UkcpkmENZ_DpMI45wRY7oItIFbv-0suLmz7U/edit?usp=sharing")
View(locations)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations )
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, color = "red" )
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address )
library(leaflet.extras)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS()
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS(options = gpsOptions())
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS(options = gpsOptions(activate = TRUE))
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 60,
setView = TRUE))
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 60,
setView = TRUE)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS( activate = TRUE,
autoCenter = TRUE, maxZoom = 60,
setView = TRUE)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS( activate = TRUE, maxZoom = 60,
setView = TRUE)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS( activate = TRUE,
setView = TRUE)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS( activate = TRUE)
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>% addControlGPS( options = gpsOptions(position = "topleft", activate = TRUE,
autoCenter = TRUE, maxZoom = 60,
setView = TRUE))
leaflet() %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = locations, label = locations$address ) %>%
addControlGPS( options = gpsOptions(position = "topleft", activate = TRUE, autoCenter = TRUE, maxZoom = 60, setView = TRUE)) %>%
activateGPS()
=======
View(data)
>>>>>>> 80b3bfc9bcdfbe180df1c940638e416530e9dfda
>>>>>>> db04401e85a21eaf7b32317b12ad64cafa809b0d
getwd()
########################
library(tidyverse)
library(ggVennDiagram)
library(forcats)
md <- read.csv('masterdataphi.csv')
#Sets up an object that groups by primary payer,
#sums the total costs each payer paid for syndemic patients,
#only saves the top 5,
#and then adds a new column, gov, for if it was funded by the government or not
md_top_payers <- md %>%
filter(sud & endo | sstvi) %>%
group_by(Primary_Payer_Class_Cd) %>%
summarise(total = sum(Total_Tot_Chrg)) %>%
arrange(desc(total)) %>%
head(5) %>%
mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('M','K','J'), TRUE, FALSE))
#Renames the primary payers to their common name
md_top_payers$Primary_Payer_Class_Cd <- fct_recode(md_top_payers$Primary_Payer_Class_Cd,
'Medicare' = 'M',
'Medicare Advantage' = 'K',
'Self-Pay' = 'P',
'Blue Care' = 'J',
'Blue Cross/Blue Shield' = 'B')
#Plots the top 5 primary payers by their costs paid for syndemic patients
ggplot(data = md_top_payers,
aes(y = total/100000000000,
x = reorder(Primary_Payer_Class_Cd, -total),
fill = gov ) ) +
geom_col() +
labs(title = 'Costs Paid by Top Payers',
caption = 'End the Syndemic | DataLab 2022',
x = 'Primary Payer',
y = 'Cost Paid (in billions of US dollars)',
subtitle = 'In 2019') +
scale_fill_manual(md_top_payers, values = c('red', 'black'),
labels = c('Privately Funded', 'Government Funded', '', '', ''),
name = 'Color Legend:') +
theme(legend.position = 'bottom') +
theme(axis.text.x = element_text(angle = 10))
#creates a object that groups by primary payer, summaries total paid by provider,
#and then adds gov columns to determine if government funded or privately funded
md_big_gov <- md %>%
filter(sud & endo | sstvi) %>%
group_by(Primary_Payer_Class_Cd) %>%
summarise(total = sum(Total_Tot_Chrg)) %>%
arrange(desc(total)) %>%
mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('C','D','M','W','N','K','J',11, 12, 8, 10, 'Q', 'T'),
'Government Funded',
'Privately Funded'))
#Plots government vs private total funding for syndemic patients
ggplot(data = md_big_gov,
aes(y = total/100000000000,
x = gov,
fill = gov ) ) +
geom_col() +
labs(title = 'Costs Paid by the Government vs Commercial Providers',
caption = 'End the Syndemic | DataLab 2022',
x = 'Primary Payer',
y = 'Cost Paid (in billions of US dollars)',
subtitle = 'In 2019') +
scale_fill_manual(md_top_payers, values = c('black', 'red')) +
theme(legend.position = '0')
#Creates a list of SUDs & ENDO or SSTVI for the ggvenn package to read
syndemic_list <-
list('SUDs' = which(md$sud),
'SSTVIs or Endocarditis' = which(md$endo | md$sstvi))
#Creates a venn diagram showing overlap in SUDS and syndemic related ICD-10s
ggVennDiagram(syndemic_list,
label_size = 4,
label_alpha = 0.3,
label = c('count')) +
theme(legend.position = '0') +
labs(caption = 'End the Syndemic | DataLab 2022',
title = 'Hospitalizations overlap for substance use disorder (SUDs) and infectious sequela of interest',
subtitle = 'TN Hospitals 2019') +
scale_fill_distiller(palette = "OrRd", direction = 1) +
scale_color_brewer(palette = "Set2")
ggplot(data = md %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(creation_dt %in% 1:3, Q1,
ifelse(creation_dt %in% 4:6, Q2,
ifelse(creation_dt %in% 7:9, Q3, Q4)))),
aes(x = quarter,
color = Age)) +
geom_line()
library(lubridate)
source("~/Desktop/Syndemic Project/syndemic/syndemic_graphs_jacob.R", echo=TRUE)
md_phi <- read.csv('masterdataphi.csv')
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% year(creation_dt)
View(md_phi)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% year(creation_dt)
########################
library(tidyverse)
library(ggVennDiagram)
library(forcats)
library(lubridate)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% year(creation_dt) year
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% year(creation_dt)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = year(creation_dt))
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt))
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt), month = month(creation_dt))
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt), month = months(creation_dt))
View(md_phi)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt))
md_phi <- read.csv('masterdataphi.csv')
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt))
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt)) %>% mutate(months = month(creation_dt))
md_phi <- read.csv('masterdataphi.csv')
month(md_phi$creation_dt)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt)) #%>% mutate(months = month(creation_dt))
month(md_phi$creation_dt)
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt)) %>% mutate(months = month(creation_dt))
md_phi <- read.csv('masterdataphi.csv')
######################## Trends in hospitalization incidence rates by age group ----
md_phi <- md_phi %>% mutate(creation_dt = mdy(creation_dt)) %>% mutate(months = month(creation_dt))
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, Q1,
ifelse(months %in% 4:6, Q2,
ifelse(months %in% 7:9, Q3, Q4)))),
aes(x = quarter,
color = Age)) +
geom_line()
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, 'Q1',
ifelse(months %in% 4:6, 'Q2',
ifelse(months %in% 7:9, 'Q3', 'Q4')))),
aes(x = quarter,
color = Age)) +
geom_line()
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, 'Q1',
ifelse(months %in% 4:6, 'Q2',
ifelse(months %in% 7:9, 'Q3', 'Q4')))),
aes(x = quarter,
color = Age)) +
geom_bar()
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, 'Q1',
ifelse(months %in% 4:6, 'Q2',
ifelse(months %in% 7:9, 'Q3', 'Q4')))),
aes(x = quarter,
color = quarter)) +
geom_bar()
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, 'Q1',
ifelse(months %in% 4:6, 'Q2',
ifelse(months %in% 7:9, 'Q3', 'Q4')))),
aes(x = quarter,
fill = quarter)) +
geom_bar()
ggplot(data = md_phi %>%
mutate(Age_Groups = ifelse(Age %in% 0:17, '0-17',
ifelse(Age %in% 18:24, '18-24',
ifelse(Age %in% 25:34, '25-34',
ifelse(Age %in% 35:44, '35-44',
ifelse(Age %in% 45:54, '45-54',
ifelse(Age %in% 55:64, '55-64', '65+'))))))) %>%
mutate(quarter = ifelse(months %in% 1:3, 'Q1',
ifelse(months %in% 4:6, 'Q2',
ifelse(months %in% 7:9, 'Q3', 'Q4')))),
aes(x = quarter,
fill = Age_Groups)) +
geom_bar()
