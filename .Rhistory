geom_line()
#Create a plot showing the percentage of countries which were rich each year.
ggplot(data = Rich_Countries_Percent, aes(x = year, y = Percent_rich)) +
geom_line()
#Create a plot showing the percentage of countries which were rich each year.
ggplot(data = Rich_Countries_Percent, aes(x = year, y = Percent_Rich)) +
geom_line()
#27. Create an object with the number of people living in poor countries each year.
Poor_Countries_Percent <-
gm %>%
group_by(year) %>%
summarise(poor = sum(status == 'Poor'), countries = n(), Percent_Poor = (poor/countries)*100)
View(Poor_Countries_Percent)
#Create an object with the number of people living in poor countries each year.
Poor_Countries_Pop <-
gm %>%
filter(status == 'Poor') %>%
summarise(sum(Pop))
#Create an object with the number of people living in poor countries each year.
Poor_Countries_Pop <-
gm %>%
filter(status == 'Poor') %>%
summarise(sum(pop))
########################
library(shiny)
library(shinydashboard)
library(tidyverse)
crash <- read_csv('https://github.com/databrew/intro-to-data-science/blob/main/data/crash.csv?raw=true')
runApp('shiny/crash')
crashop <- crash %>% group_by(Operator) %>% tally()
output$distPlot <- renderPlot({
ggplot(data = crashop,
aes(x = Operator)) +
geom_bar()
})
# Define server logic required to draw a histogram
server <- function(input, output) {
crashop <- crash %>% group_by(Operator) %>% tally()
output$distPlot <- renderPlot({
ggplot(data = crashop,
aes(x = Operator)) +
geom_bar()
})
}
ggplot(data = crashop,
aes(x = Operator)) +
geom_bar()
runApp('shiny/crash')
crashop <- crash %>% group_by(Operator) %>% head(20) %>%  tally()
crashop <- crash %>% group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(20)
crashop <- crash %>% group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashop <- crash %>% filter(Date >= 2000-01-01) group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashop <- crash %>% filter(Date >= 2000-01-01) %>%  group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashop <- crash %>% filter(Date >= 2022-01-01) %>%  group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashop <- crash %>% filter(Date >= 2022-01-01) %>%  group_by(Operator) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashop <- crash %>% filter(Date >= 2022-01-01) %>%  group_by(`Crash cause`) %>%  tally() %>% arrange(desc(n)) %>% head(10)
crashca <- crash %>% filter(Date >= 2022-01-01) %>%  group_by(`Crash cause`) %>%  tally() %>% arrange(desc(n)) %>% head(10)
View(crashca)
ggplot(data = crashca,
aes(x = Operator)) +
geom_bar()
ggplot(data = crashca,
aes(x = `Crash cause`)) +
geom_bar()
ggplot(data = crashca,
aes(x = `Crash cause`, y = n)) +
geom_col()
ggplot(data = crashca,
aes(x = `Crash cause`, y = n)) +
geom_col() +
theme_classic()
ggplot(data = crashca,
aes(x = `Crash cause`, y = n)) +
geom_col() +
theme_calc()
library(ggthemes)
ggplot(data = crashca,
aes(x = `Crash cause`, y = n)) +
geom_col() +
theme_calc()
ggplot(data = crashca,
aes(y = `Crash cause`, x = n)) +
geom_col() +
theme_calc()
ggplot(data = crashca,
aes(y = `Crash cause`, x = n)) +
geom_col() +
theme_calc() +
labs(title = 'Crashes by Cause',
x = 'Total Crashes',
y = 'Causes')
crashca <- crash %>%  group_by(`Crash cause`, year) %>%  tally() %>% arrange(desc(n))
crash <- crash %>% mutate(Year = year(Date))
library(tidyverse)
library(ggthemes)
library(dplyr)
library(tidytext)
library(ggthemes)
library(sentimentr)
library(lubridate)
crash <- crash %>% mutate(Year = year(Date))
crashca <- crash %>%  group_by(`Crash cause`, Year) %>%  tally() %>% arrange(desc(n))
runApp('shiny/example_2')
runApp('shiny/crash')
runApp('shiny/example_2')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
ggplot(data = crashca,
aes(color = `Crash cause`, y = n, x = Year)) +
geom_line() +
theme_calc() +
labs(title = 'Crashes by Cause',
x = 'Total Crashes',
y = 'Causes')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
ggplot(data = crashca,
aes(color = `Crash cause`, y = n, x = Year)) +
geom_line() +
theme_calc() +
labs(title = 'Crashes by Cause',
x = 'Total Crashes',
y = 'Causes')
runApp('shiny/crash')
runApp('shiny/crash')
class(crashca$Year)
crash <- crash %>% mutate(Year = year(Date))
crashca <- crash %>%  group_by(`Crash cause`, Year) %>%  tally() %>% arrange(desc(n)) %>% filter(Year >= 1975)
ggplot(data = crashca,
aes(color = `Crash cause`, y = n, x = Year)) +
geom_line() +
theme_calc() +
labs(title = 'Crashes by Cause',
x = 'Total Crashes',
y = 'Causes')
runApp('shiny/crash')
crash$Year
min(crash$Year)
max(crash$Year)
min(crash$Year)
?sliderInput
runApp('shiny/crash')
min(crash$Year)
runApp('shiny/crash')
########################
# Define UI for application that draws a histogram
ui <- fluidPage(
class(crash$Year)
# Application title
titlePanel("A Dangerous Operator"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("year",
"Select Year:",
min = min(crash$Year, na.rm = TRUE),
max = max(crash$Year, na.rm = TRUE),
value = min(crash$Year, na.rm = TRUE),
step = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
class(crash$Year)
crash <- read_csv('https://github.com/databrew/intro-to-data-science/blob/main/data/crash.csv?raw=true')
min(crash$Year, na.rm = TRUE)
crash$Year
crash <- read_csv('https://github.com/databrew/intro-to-data-science/blob/main/data/crash.csv?raw=true')
runApp('shiny/crash')
shiny::runApp('shiny/crash')
runApp('shiny/crash')
crash <- read_csv('https://github.com/databrew/intro-to-data-science/blob/main/data/crash.csv?raw=true')
View(crash)
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
runApp('shiny/crash')
pkgs <- c('tigris', 'dplyr', 'readr', 'ggplot2', 'leaflet', 'rgdal', 'raster', 'sp', 'rasterVis',
'htmltools', 'RColorBrewer', 'leaflet.extras', 'geosphere')
for(pkg in pkgs){
if(! pkg %in% installed.packages()){install.packages(pkg)}
}
source("~/DataLab/GIS_Practice.R", echo=TRUE)
install.packages("rgdal")
source("~/DataLab/GIS_Practice.R", echo=TRUE)
source("~/DataLab/GIS_Practice.R", echo=TRUE)
tn <- read_csv('https://github.com/databrew/intro-to-data-science/raw/main/data/tnzips.csv')
View(tn)
ggplot(data = tn, aes(x = pop)) +
geom_histogram()
tn %>% arrange(desc(pop)) %>% head(tn)
tn %>% arrange(desc(pop))
#
tn %>% group_by(city) %>% tally() %>% arrange(n)
#
tn %>% group_by(city) %>% tally() %>% arrange(-n)
tn %>% group_by(pop) %>% tally()
tn %>% filter(pop) %>% tally()
#Total pop
tn %>% summarise(total_pop = sum(pop))
#Total pop
tn %>% summarise(total_pop = sum(pop), na.rm = TRUE)
#Total pop
tn %>% summarise(total_pop = sum(pop, na.rm = TRUE))
source("~/DataLab/GIS_Practice.R", echo=TRUE)
#Top 5 cities
top5 <- tn %>%
group_by(city) %>%
summarise(total_pop = sum(pop, na.rm = TRUE)) %>%
arrange(desc(total_pop)) %>%
head(5)
View(top5)
ggplot(data = top5, aes(x = total_pop, y = city)) %>%
geom_point()
ggplot(data = top5, aes(x = total_pop, y = city)) +
geom_point()
ggplot(data = top5, aes(x = total_pop, y = city)) +
geom_col()
########################
library(tigris)
options(tigris_use_cache = TRUE)
temp <- tigris::zctas(starts_with = 370:385)
tnz <-  as(temp, 'Spatial')
install.packages("tigris")
View(tnz)
########################
plot(tnz)
plot(tnz[1,])
plot(tnz[9,])
plot(tnz[69,])
install.packages(rgos)
install.packages(rgeos)
install.packages('rgeos')
library(rgeos)
#Simplify data
tns <- gSimplify(tnz, tol = 0.1)
plot(tns)
#Simplify data
tns <- gSimplify(tnz, tol = 0.5)
plot(tns)
#Simplify data
tns <- gSimplify(tnz, tol = 0.1)
plot(tns)
#Simplify data
tns <- gSimplify(tnz, tol = 0.05)
plot(tns)
#Simplify data
tns <- gSimplify(tnz, tol = 0.01)
plot(tns)
tng <- fortify(tnz, region = 'GEOID20') %>%
mutate(zip = id)
########################
leaflet()
########################
leaflet() %>% addTiles()
########################
leaflet() %>% addTiles() %>% addPolygons(data = tnz)
sewanee <-tnz[tnz@data$GEOID20 %in% c(37375, 37383),]
leaflet() %>% addTiles() %>% addPolygons(data = sewanee)
leaflet() %>% addTiles() %>% addPolygons(data = sewanee,
weight = 1,
fillOpacity = 0)
leaflet() %>% addTiles() %>% addPolygons(data = sewanee,
weight = 1,
fillOpacity = 0.1)
chat <- tn(tnz@data$GEOID20) %in% tn$zip(tn$city == 'Chattanooga')
chat <- tnz[tnz@data$GEOID20 %in% tn$zip[tn$city == 'Chattanooga'],]
plot(chat)
leaflet() %>% addTiles() %>% addPolygons(data = chat)
View(tn)
View(chat)
chat@data <- chat@data %>%
left_join(tn %>% mutate(as.character(zip)), by = `ZCTASCE20` = `zip`)
chat@data <- chat@data %>%
left_join(tn %>% mutate(as.character(zip)), by = c(`ZCTASCE20` = `zip`))
chat@data <- chat@data %>%
left_join(tn %>% mutate(zip = as.character(zip)), by = c(`ZCTASCE20` = `zip`))
chat@data <- chat@data %>%
left_join(tn %>% mutate(zip = as.character(zip)), by = c('ZCTASCE20' = 'zip'))
chat@data <- chat@data %>%
left_join(tn %>% mutate(zip = as.character(zip)), by = c('ZCTA5CE20' = 'zip'))
leaflet() %>% addTiles() %>% addPolygons(data = chat)
leaflet() %>% addTiles() %>% addPolygons(data = chat, label = chat@data)
mappal <- colorNumeric(palette = brewer.pal(9, 'Greens')),
domain = chat@data$pop
mappal <- colorNumeric(palette = brewer.pal(9, 'Greens')), domain = chat@data$pop
mappal <- colorNumeric(palette = brewer.pal(9, 'Greens'), domain = chat@data$pop )
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = map_pal(pop))
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = map_palette(pop))
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = mappal(pop))
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = ~mappal(pop))
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black')
leaflet() %>% addTiles() %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black',
fillOpacity = 1)
leaflet() %>% addProviderTiles(providers$Stamen.TonerBackground) %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black',
fillOpacity = 1)
leaflet() %>% addProviderTiles(providers$Stamen.TonerBackground) %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black',
fillOpacity = 1,
label = `pop`)
leaflet() %>% addProviderTiles(providers$Stamen.TonerBackground) %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black',
fillOpacity = 1,
label = 'pop')
leaflet() %>% addProviderTiles(providers$Stamen.TonerBackground) %>% addPolygons(data = chat,
fillColor = ~mappal(pop),
weight = 1,
color = 'black',
fillOpacity = 1,
label = ~pop)
centroids <- coordinates(chat)
View(centroids)
sewanee <- c(-85.92, 35.20)
km <- distm(sewanee, centroids)
View(centroids)
View(km)
chat@data$km <- km[1,]
View(chat)
map_pal <- colorNumeric(palette = brewer.pal(n = 9, 'Spectral'),
domain = chat@data$km)
leaflet() %>%
addTiles() %>%
addPolygons(data = chat, fillColor = ~map_pal(km))
leaflet() %>%
addTiles() %>%
addPolygons(data = chat, fillColor = ~map_pal(km),
fillOpacity = 0.9,
weight = 0.3,
color = 'white')
source("~/DataLab/GIS_rasters_practice.R", echo=TRUE)
source("~/DataLab/GIS_rasters_practice.R", echo=TRUE)
gc()
source("~/DataLab/GIS_rasters_practice.R", echo=TRUE)
names(usa)
plot(usa[[1]])
plot(usa[[2]])
states <- getData(name = 'GADM', level = 1, country = 'USA')
head(states)
tn <- states[states$NAME_1 == 'Tennessee',]
plot(tn)
# First crop to a simple bounding box
tn_elev <- crop(usa[[1]], tn)
# Now crop to the exact boundary of TN
tn_elev <- mask(tn_elev, tn)
# Plot it
plot(tn_elev)
# Setup a temporary directory for these data
destination_directory <- '/tmp'
# Download the zipped folder of data
destination_file <- file.path(destination_directory, 'sewanee.zip')
download.file('https://raw.githubusercontent.com/databrew/intro-to-data-science/main/data/sewanee.zip',
destfile = destination_file)
# Unzip folder
unzip(destination_file, exdir = destination_directory)
elevation <- raster(file.path(destination_directory,
'DEM USGS 10m.tif'))
plot(tn)
plot(elevation, add = T)
elevation_ll <- projectRaster(elevation,
crs = proj4string(tn))
plot(tn)
plot(elevation_ll, add = T)
fencing <- gsheet2tbl('https://docs.google.com/spreadsheets/d/161MfIHC-6iwkpx85Ce2-zV52F4LNET2sOhgl0_zl3kM/edit?usp=sharing')
library(gsheet)
library(tidyverse)
library(ggthemes)
library(plotly)
library(rmdformats)
fencing <- gsheet2tbl('https://docs.google.com/spreadsheets/d/161MfIHC-6iwkpx85Ce2-zV52F4LNET2sOhgl0_zl3kM/edit?usp=sharing')
View(fencing)
source("~/DataLab/Syndemic/syndemic/syndemic_graphs_jacob.R", echo=TRUE)
setwd("~/DataLab/Syndemic/syndemic")
source("~/DataLab/Syndemic/syndemic/syndemic_graphs_jacob.R", echo=TRUE)
zips<-read_csv("zip_code_database.csv")
zips<-zips%>% select(zip,state,county)
zips<-zips %>% rename(Patient_Zip = zip)
d<-full_join(md_phi,zips, by = "Patient_Zip")
d<-d %>% distinct(...1, .keep_all = TRUE)
dids<-d %>% select(...1,state,county)
write_csv(dids, "countybyid.csv")
source("~/DataLab/Syndemic/syndemic/table1_ets.R", echo=TRUE)
setwd("~/DataLab/Syndemic/syndemic")
source("~/DataLab/Syndemic/syndemic/table1_ets.R", echo=TRUE)
source("~/DataLab/Syndemic/syndemic/table1_ets.R", echo=TRUE)
source("~/DataLab/Syndemic/syndemic/table1_ets.R", echo=TRUE)
zips <- read_csv("countybyid.csv")
masterdata <- read.csv("masterdata.csv")
masterdata<-full_join(zips,masterdata, by = "...1" )
masterdata <- read.csv("masterdata.csv")
library(tidyverse)
mdata <- read.csv("m_data.csv")
zips <- read_csv("countybyid.csv")
source("~/DataLab/Syndemic/syndemic/table1_ets.R", echo=TRUE)
library(tidyverse)
#mdata <- read.csv("m_data.csv")
zips <- read_csv("countybyid.csv")
masterdata <- read.csv("masterdata.csv")
masterdata<-full_join(zips,masterdata, by = "...1" )
masterdata<-masterdata %>% filter(state == "TN")
# ----Sex----
#Calculate the totals for each condition (condition and SUD diagnosis)
#number of osteomyelitis and SUD cases
masterdata %>%
filter(ost&sud) %>%
tally()
#number of endocarditis and SUD cases
masterdata %>%
filter(endo&sud) %>%
tally()
#number of sepsis and SUD cases
masterdata %>%
filter(sepsis&sud) %>%
tally()
(267/9603) *100 #Expired
(267/9603) *100 #Expired
(100/9603) *100 #Hospice
source("~/DataLab/Syndemic/syndemic/syndemic_graphs_jacob.R", echo=TRUE)
md %>% group_by(gov) %>% tally()
md %>%   mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('C','D','M','W','N','K','J',11, 12, 8, 10, 'Q', 'T'),
'Government Funded',
'Privately Funded')) %>%  group_by(gov) %>% tally()
md %>%   mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('C','D','M','W','N','K','J',11, 12, 8, 10, 'Q', 'T'),
'Government Funded',
'Privately Funded')) %>% summarise(sum(Total_Tot_Chrg))
md %>% filter(sud, endo |sstvi) %>%  mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('C','D','M','W','N','K','J',11, 12, 8, 10, 'Q', 'T'),
'Government Funded',
'Privately Funded')) %>% summarise(sum(Total_Tot_Chrg))
ggplot(data = md %>%
mutate(quarter = ifelse(months %in% 1:3, 1,
ifelse(months %in% 4:6, 2,
ifelse(months %in% 7:9, 3, 4)))),
aes(x = quarter)) +
geom_bar(
)
ggplot(data = md %>%  mutate(creation_dt = mdy(creation_dt)) %>%
mutate(months = month(creation_dt)) %>%
mutate(quarter = ifelse(months %in% 1:3, 1,
ifelse(months %in% 4:6, 2,
ifelse(months %in% 7:9, 3, 4)))),
aes(x = quarter)) +
geom_bar()
About Me
<center>
#About Me
</center>
########################
library(tidyverse)
library(ggVennDiagram)
library(forcats)
library(lubridate)
md <- read_csv('masterdata.csv')
zipid<-read_csv("countybyid.csv")
md<-full_join(zipid,md,by = "...1") %>% filter(state == "TN")
#creates a object that groups by primary payer, summaries total paid by provider,
#and then adds gov columns to determine if government funded or privately funded
md_big_gov <- md %>%
filter(sud, endo | sstvi) %>%
group_by(Primary_Payer_Class_Cd) %>%
summarise(total = sum(Total_Tot_Chrg)) %>%
arrange(desc(total)) %>%
mutate(gov = ifelse(Primary_Payer_Class_Cd %in% c('C','D','M','W','N','K','J',11, 12, 8, 10, 'Q', 'T'),
'Government Funded',
'Privately Funded'))
md_big_gov %>% filter(gov,total) %>%  group_by(gov) %>% tally()
View(md_big_gov)
md_big_gov %>% filter(gov,total) %>% group_by(gov) %>% tally()
md_big_gov %>% filter(gov,total) %>% group_by(gov) %>% summarise(sum(total))
md_big_gov %>% group_by(gov) %>% summarise(sum(total))
326000000 / 9000
52 * 0.43
22*9000
